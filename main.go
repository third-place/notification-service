/*
 * Otto notification service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"fmt"
	"github.com/rs/cors"
	"github.com/third-place/notification-service/internal"
	"github.com/third-place/notification-service/internal/kafka"
	"github.com/third-place/notification-service/internal/middleware"
	"log"
	"net/http"
	"os"
	"strconv"
)

func main() {
	go readKafka()
	serveHttp()
}

func readKafka() {
	log.Print("connecting to kafka")
	kafka.InitializeAndRunLoop()
	log.Print("exit kafka loop")
}

func getServicePort() int {
	servicePort, err := strconv.Atoi(os.Getenv("SERVICE_PORT"))
	if err != nil {
		log.Fatal(err)
	}
	return servicePort
}

func serveHttp() {
	router := internal.NewRouter()
	handler := cors.AllowAll().Handler(router)
	port := getServicePort()
	log.Printf("http listening on %d", port)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", port),
		middleware.ContentTypeMiddleware(handler)))
}
